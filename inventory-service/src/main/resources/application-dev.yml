spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/ecommerce_db
    username: ecommerce_user
    password: ecommerce_pass
    driver-class-name: org.postgresql.Driver

  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  cache:
    type: redis
    redis:
      time-to-live: 300000 # 5 minutos
      cache-null-values: false

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        show_sql: true

  kafka:
    producer:
      properties:
        # Habilitar métricas do Kafka
        enable.idempotence: true
    consumer:
      properties:
        # Habilitar métricas do Kafka
        enable.auto.commit: false

resilience4j:
  circuitbreaker:
    instances:
      inventory-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10

  retry:
    instances:
      inventory-service:
        max-attempts: 3
        wait-duration: 1s
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2

  timelimiter:
    instances:
      inventory-service:
        timeout-duration: 3s
        cancel-running-future: true

logging:
  level:
    com.ecommerce.inventory: DEBUG
    org.springframework.kafka: DEBUG
    zipkin2: DEBUG
    io.micrometer.tracing: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%X{traceId:-},%X{spanId:-}] - %msg%n"
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

# Distributed Tracing
management:
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  observations:
    key-values:
      application: ${spring.application.name}
  metrics:
    distribution:
      percentiles-histogram:
        kafka: true
      percentiles:
        kafka: 0.5,0.95,0.99
      slo:
        kafka: 100ms,200ms,500ms