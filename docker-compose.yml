# Docker Compose para Ambiente de Desenvolvimento - E-commerce Techbra
# Provisiona toda infraestrutura necessária para o projeto de microserviços
version: '3.8'

services:
  # ================================
  # DATABASE SERVICES
  # ================================

  # PostgreSQL - Banco principal para todos os microserviços
  postgres:
    image: postgres:16-alpine
    container_name: techbra-postgres
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - techbra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # CACHE SERVICES
  # ================================

  # Redis - Cache distribuído L2 para todos os serviços
  redis:
    image: redis:7-alpine
    container_name: techbra-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - techbra-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # MESSAGE BROKER
  # ================================

  # Zookeeper - Requerido pelo Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: techbra-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - techbra-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka - Message Broker para Event-Driven Architecture
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: techbra-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # Listeners otimizados para desenvolvimento
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # Configurações de tópicos específicos do projeto
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'

      # Configurações otimizadas para development
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 dias
      KAFKA_LOG_CLEANUP_POLICY: delete

      # Performance para desenvolvimento
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"

      # Tópicos pré-definidos do projeto
      KAFKA_CREATE_TOPICS: >
        order.events:3:1,
        billing.events:3:1,
        inventory.events:3:1,
        notification.events:3:1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - techbra-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI - Interface gráfica para gerenciar Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: techbra-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: techbra-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - techbra-network

  # ================================
  # OBSERVABILITY STACK
  # ================================

  # Prometheus - Coleta de métricas
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: techbra-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - techbra-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana - Dashboards e visualização
  grafana:
    image: grafana/grafana:10.2.0
    container_name: techbra-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/grafana/dashboards:/etc/grafana/dashboards:ro
    networks:
      - techbra-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: techbra-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP endpoint for spans
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - JAEGER_DISABLED=false
      - LOG_LEVEL=info
    volumes:
      - jaeger_data:/tmp
    networks:
      - techbra-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:14269/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # LOCALSTACK (AWS Local)
  # ================================

  # LocalStack - Simula serviços AWS localmente
  localstack:
    image: localstack/localstack:3.0
    container_name: techbra-localstack
    ports:
      - "4566:4566"  # LocalStack Gateway
    environment:
      - SERVICES=s3,sqs,sns,dynamodb,lambda
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PERSISTENCE=1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - localstack_data:/var/lib/localstack
    networks:
      - techbra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4566/_localstack/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

# ================================
# VOLUMES
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  localstack_data:
    driver: local

# ================================
# NETWORKS
# ================================
networks:
  techbra-network:
    driver: bridge
    name: techbra-network
    ipam:
      config:
        - subnet: 172.20.0.0/16